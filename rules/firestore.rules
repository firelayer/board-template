rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    // Helpers for users permissions
    function isLogged() { return request.auth != null }

    // Card permissions
    match /cards/{cardId} {
      function isOwner() {
        return isLogged() && request.auth.uid == resource.data.uid;
      }

      function isCreateValid() {
        return isLogged()
          && request.resource.data.size() == 7
          && request.resource.data.hasAll(['createdAt', 'updatedAt', 'name', 'text', 'list', 'uid', 'votes'])
          && request.resource.data.name is string
          && request.resource.data.text.size() <= 20
          && request.resource.data.list in ['templates', 'firelayer', 'dashboard', 'random']
          && request.resource.data.votes is array
          && request.resource.data.votes.size() == 1
          && request.resource.data.uid == request.auth.uid
          && request.auth.uid in request.resource.data.votes
          && request.resource.data.createdAt is timestamp
          && request.resource.data.updatedAt is timestamp
          && request.resource.data.text is string
          && request.resource.data.text.size() <= 150
          && isUIDValid()
      }

      function isVoteValid() {
        return
          // not anonymous
          request.auth.token.firebase.sign_in_provider != 'anonymous' &&
          // havent voted yet
          !(request.auth.uid in resource.data.votes) &&
          // all previous votes are there
          request.resource.data.votes.hasAll(resource.data.votes) &&
          // incremented only one
          request.resource.data.votes.size() == resource.data.votes.size() + 1 &&
          // and that one is the user who voted
          request.auth.uid in request.resource.data.votes
      }

      function isUpdateValid() {
        return request.resource.data.size() == 7
          && request.resource.data.hasAll(['createdAt', 'updatedAt', 'name', 'text', 'list', 'uid', 'votes'])
          && request.resource.data.name == resource.data.name
          && request.resource.data.uid == resource.data.uid
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.updatedAt is timestamp
          && request.resource.data.list == resource.data.list
          && request.resource.data.text == resource.data.text
          && isVoteValid()
      }

      allow get, list: if isLogged();
      allow create: if isCreateValid();
      allow update: if isUpdateValid();
      allow delete: if isOwner();
    }
  }
}
